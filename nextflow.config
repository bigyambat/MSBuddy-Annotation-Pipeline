/*
========================================================================================
    MS Annotation & QC Pipeline Configuration
========================================================================================
*/

// Global default parameters
params {
    // Input/Output options
    input                   = null
    outdir                  = 'results'

    // MSBuddy parameters
    ms1_tol                 = 10                // MS1 tolerance in ppm (default: 5)
    ms2_tol                 = 10                // MS2 tolerance in ppm (default: 10)
    timeout_secs            = 300               // timeout in seconds per spectrum

    // Annotation quality thresholds
    score_threshold                     = 0.7   // Minimum MSBuddy score for good annotation
    explained_peaks_pct_threshold       = 0.5   // Minimum explained peaks percentage (0-1)
    explained_intensity_pct_threshold   = 0.6   // Minimum explained intensity percentage (0-1)
    mass_error_threshold                = 5.0   // Maximum mass error in ppm
    min_explained_peaks                 = 3     // Minimum number of explained peaks

    // Resource limits
    max_memory              = '8.GB'
    max_cpus                = 4
    max_time                = '24.h'

    // Help and version
    help                    = false
    version                 = false
}

// Manifest
manifest {
    name                    = 'ms-annotation-qc'
    author                  = 'Bigy Ambat'
    homePage                = 'https://github.com/yourusername/ms-annotation-qc'
    description             = 'Mass Spectrum Annotation & QC Pipeline using MSBuddy'
    mainScript              = 'main.nf'
    nextflowVersion         = '>=21.10.0'
    version                 = '2.1'
}

// Process configuration
process {
    // Default resources for all processes
    cpus   = { check_max( 2, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time   = { check_max( 2.h * task.attempt, 'time' ) }

    // Error handling
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'

    // Process-specific resources
    withName: ANNOTATE {
        cpus   = { check_max( 2, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withName: ANALYZE_PEAK_EXPLANATION {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withName: GENERATE_QC {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' ) }
    }
}

// Execution profiles
profiles {
    // Standard profile (local execution)
    standard {
        process.executor = 'local'
    }

    // Docker profile
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        process.container      = 'ms-annotation-qc:latest'
    }

    // Singularity profile
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        process.container      = 'ms-annotation-qc.sif'
    }

    // Conda profile
    conda {
        conda.enabled          = true
        process.conda          = "${baseDir}/environment.yml"
    }

    // HPC cluster profile (SLURM example)
    slurm {
        process.executor       = 'slurm'
        process.queue          = 'batch'
        process.clusterOptions = '--account=your_account'

        // Increase resources for cluster
        process.cpus           = { check_max( 4, 'cpus' ) }
        process.memory         = { check_max( 8.GB * task.attempt, 'memory' ) }
        process.time           = { check_max( 8.h * task.attempt, 'time' ) }
    }

    // PBS/Torque profile
    pbs {
        process.executor       = 'pbs'
        process.queue          = 'batch'
    }

    // SGE profile
    sge {
        process.executor       = 'sge'
        process.queue          = 'all.q'
        process.penv           = 'smp'
    }

    // LSF profile
    lsf {
        process.executor       = 'lsf'
        process.queue          = 'normal'
    }

    // AWS Batch profile
    awsbatch {
        process.executor       = 'awsbatch'
        process.queue          = 'your-aws-batch-queue'
        aws.region             = 'us-east-1'
        aws.batch.cliPath      = '/home/ec2-user/miniconda/bin/aws'
    }

    // Google Cloud profile
    gcp {
        process.executor       = 'google-lifesciences'
        google.region          = 'us-central1'
        google.project         = 'your-project-id'
    }

    // Test profile (for small test datasets)
    test {
        params.max_memory      = '2.GB'
        params.max_cpus        = 1
        params.max_time        = '30.m'
        params.timeout_secs    = 60
    }

    // Debug profile
    debug {
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
}

// Export environment variables
env {
    PYTHONUNBUFFERED = 1
    MSBUDDY_DATA = "${HOME}/.msbuddy/data"
}

// Timeline, report and trace
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline.html"
}

report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report.html"
}

trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace.txt"
}

dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
